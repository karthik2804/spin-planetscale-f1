declare type ReqInit = Pick<RequestInit, 'method' | 'headers'> & {
    body: string;
};
declare type Row = Record<string, unknown>;
interface VitessError {
    message: string;
    code: string;
}
export interface ExecutedQuery {
    headers: string[];
    rows: Row[];
    size: number;
    statement: string;
    insertId: string | null;
    rowsAffected: number | null;
    error: VitessError | null;
    time: number;
}
export interface Config {
    username: string;
    password: string;
    host: string;
    fetch?: (input: string, init?: ReqInit) => Promise<Pick<Response, 'ok' | 'json' | 'status' | 'statusText' | 'text'>>;
}
export declare class Client {
    private config;
    constructor(config: Config);
    execute(query: string, args?: object | any[]): Promise<ExecutedQuery>;
    connection(): Connection;
}
export declare class Connection {
    private config;
    private session;
    constructor(config: Config);
    refresh(): Promise<boolean>;
    private createSession;
    private postJSON;
    execute(query: string, args?: object | any[]): Promise<ExecutedQuery>;
}
export declare function connect(config: Config): Connection;
export {};
